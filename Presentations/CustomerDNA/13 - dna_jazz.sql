select COUNT(*) backers,
sum(case when abs(state_successful) >= 3 then 1.0 else 0.0 end) / count(*) as state_successful_sig,
sum(case when abs(state_failed) >= 3 then 1.0 else 0.0 end) / count(*) as state_failed_sig,
sum(case when abs(state_canceled) >= 3 then 1.0 else 0.0 end) / count(*) as state_canceled_sig,
sum(case when abs(state_suspended) >= 3 then 1.0 else 0.0 end) / count(*) as state_suspended_sig,
sum(case when abs(category_pop) >= 3 then 1.0 else 0.0 end) / count(*) as category_pop_sig,
sum(case when abs(category_open_hardware) >= 3 then 1.0 else 0.0 end) / count(*) as category_open_hardware_sig,
sum(case when abs(category_board_card_games) >= 3 then 1.0 else 0.0 end) / count(*) as category_board_card_games_sig,
sum(case when abs(category_world_music) >= 3 then 1.0 else 0.0 end) / count(*) as category_world_music_sig,
sum(case when abs(category_fashion) >= 3 then 1.0 else 0.0 end) / count(*) as category_fashion_sig,
sum(case when abs(category_nonfiction) >= 3 then 1.0 else 0.0 end) / count(*) as category_nonfiction_sig,
sum(case when abs(category_dance) >= 3 then 1.0 else 0.0 end) / count(*) as category_dance_sig,
sum(case when abs(category_webseries) >= 3 then 1.0 else 0.0 end) / count(*) as category_webseries_sig,
sum(case when abs(category_film_video) >= 3 then 1.0 else 0.0 end) / count(*) as category_film_video_sig,
sum(case when abs(category_indie_rock) >= 3 then 1.0 else 0.0 end) / count(*) as category_indie_rock_sig,
sum(case when abs(category_video_games) >= 3 then 1.0 else 0.0 end) / count(*) as category_video_games_sig,
sum(case when abs(category_fiction) >= 3 then 1.0 else 0.0 end) / count(*) as category_fiction_sig,
sum(case when abs(category_sculpture) >= 3 then 1.0 else 0.0 end) / count(*) as category_sculpture_sig,
sum(case when abs(category_photography) >= 3 then 1.0 else 0.0 end) / count(*) as category_photography_sig,
sum(case when abs(category_public_art) >= 3 then 1.0 else 0.0 end) / count(*) as category_public_art_sig,
sum(case when abs(category_periodical) >= 3 then 1.0 else 0.0 end) / count(*) as category_periodical_sig,
sum(case when abs(category_poetry) >= 3 then 1.0 else 0.0 end) / count(*) as category_poetry_sig,
sum(case when abs(category_crafts) >= 3 then 1.0 else 0.0 end) / count(*) as category_crafts_sig,
sum(case when abs(category_journalism) >= 3 then 1.0 else 0.0 end) / count(*) as category_journalism_sig,
sum(case when abs(category_classical_music) >= 3 then 1.0 else 0.0 end) / count(*) as category_classical_music_sig,
sum(case when abs(category_jazz) >= 3 then 1.0 else 0.0 end) / count(*) as category_jazz_sig,
sum(case when abs(category_food) >= 3 then 1.0 else 0.0 end) / count(*) as category_food_sig,
sum(case when abs(category_graphic_design) >= 3 then 1.0 else 0.0 end) / count(*) as category_graphic_design_sig,
sum(case when abs(category_rock) >= 3 then 1.0 else 0.0 end) / count(*) as category_rock_sig,
sum(case when abs(category_country_folk) >= 3 then 1.0 else 0.0 end) / count(*) as category_country_folk_sig,
sum(case when abs(category_art) >= 3 then 1.0 else 0.0 end) / count(*) as category_art_sig,
sum(case when abs(category_theater) >= 3 then 1.0 else 0.0 end) / count(*) as category_theater_sig,
sum(case when abs(category_electronic_music) >= 3 then 1.0 else 0.0 end) / count(*) as category_electronic_music_sig,
sum(case when abs(category_open_software) >= 3 then 1.0 else 0.0 end) / count(*) as category_open_software_sig,
sum(case when abs(category_narrative_film) >= 3 then 1.0 else 0.0 end) / count(*) as category_narrative_film_sig,
sum(case when abs(category_painting) >= 3 then 1.0 else 0.0 end) / count(*) as category_painting_sig,
sum(case when abs(category_animation) >= 3 then 1.0 else 0.0 end) / count(*) as category_animation_sig,
sum(case when abs(category_comics) >= 3 then 1.0 else 0.0 end) / count(*) as category_comics_sig,
sum(case when abs(category_publishing) >= 3 then 1.0 else 0.0 end) / count(*) as category_publishing_sig,
sum(case when abs(category_art_book) >= 3 then 1.0 else 0.0 end) / count(*) as category_art_book_sig,
sum(case when abs(category_short_film) >= 3 then 1.0 else 0.0 end) / count(*) as category_short_film_sig,
sum(case when abs(category_mixed_media) >= 3 then 1.0 else 0.0 end) / count(*) as category_mixed_media_sig,
sum(case when abs(category_hip_hop) >= 3 then 1.0 else 0.0 end) / count(*) as category_hip_hop_sig,
sum(case when abs(category_games) >= 3 then 1.0 else 0.0 end) / count(*) as category_games_sig,
sum(case when abs(category_performance_art) >= 3 then 1.0 else 0.0 end) / count(*) as category_performance_art_sig,
sum(case when abs(category_conceptual_art) >= 3 then 1.0 else 0.0 end) / count(*) as category_conceptual_art_sig,
sum(case when abs(category_illustration) >= 3 then 1.0 else 0.0 end) / count(*) as category_illustration_sig,
sum(case when abs(category_digital_art) >= 3 then 1.0 else 0.0 end) / count(*) as category_digital_art_sig,
sum(case when abs(category_design) >= 3 then 1.0 else 0.0 end) / count(*) as category_design_sig,
sum(case when abs(category_music) >= 3 then 1.0 else 0.0 end) / count(*) as category_music_sig,
sum(case when abs(category_product_design) >= 3 then 1.0 else 0.0 end) / count(*) as category_product_design_sig,
sum(case when abs(category_childrens_book) >= 3 then 1.0 else 0.0 end) / count(*) as category_childrens_book_sig,
sum(case when abs(category_documentary) >= 3 then 1.0 else 0.0 end) / count(*) as category_documentary_sig,
sum(case when abs(category_technology) >= 3 then 1.0 else 0.0 end) / count(*) as category_technology_sig,
sum(case when abs(goal_1_1000) >= 3 then 1.0 else 0.0 end) / count(*) as goal_1_1000_sig,
sum(case when abs(goal_1001_5000) >= 3 then 1.0 else 0.0 end) / count(*) as goal_1001_5000_sig,
sum(case when abs(goal_5001_10000) >= 3 then 1.0 else 0.0 end) / count(*) as goal_5001_10000_sig,
sum(case when abs(goal_10001_30000) >= 3 then 1.0 else 0.0 end) / count(*) as goal_10001_30000_sig,
sum(case when abs(goal_30001_100000) >= 3 then 1.0 else 0.0 end) / count(*) as goal_30001_100000_sig,
sum(case when abs(goal_100001_250000) >= 3 then 1.0 else 0.0 end) / count(*) as goal_100001_250000_sig,
sum(case when abs(goal_250001_plus) >= 3 then 1.0 else 0.0 end) / count(*) as goal_250001_plus_sig
from dna_backer
where category_jazz >= 3