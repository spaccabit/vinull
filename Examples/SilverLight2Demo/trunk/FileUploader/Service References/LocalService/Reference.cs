//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileUploader.LocalService {
    
    
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://SilverLight2Demmo/FileService")]
    public interface FileServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://SilverLight2Demmo/FileService/GenerateClientID", ReplyAction="*")]
        System.IAsyncResult BeginGenerateClientID(FileUploader.LocalService.GenerateClientIDRequest request, System.AsyncCallback callback, object asyncState);
        
        FileUploader.LocalService.GenerateClientIDResponse EndGenerateClientID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://SilverLight2Demmo/FileService/SaveFileChunk", ReplyAction="*")]
        System.IAsyncResult BeginSaveFileChunk(FileUploader.LocalService.SaveFileChunkRequest request, System.AsyncCallback callback, object asyncState);
        
        FileUploader.LocalService.SaveFileChunkResponse EndSaveFileChunk(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://SilverLight2Demmo/FileService/ProcessFile", ReplyAction="*")]
        System.IAsyncResult BeginProcessFile(FileUploader.LocalService.ProcessFileRequest request, System.AsyncCallback callback, object asyncState);
        
        FileUploader.LocalService.ProcessFileResponse EndProcessFile(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GenerateClientIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GenerateClientID", Namespace="http://SilverLight2Demmo/FileService", Order=0)]
        public FileUploader.LocalService.GenerateClientIDRequestBody Body;
        
        public GenerateClientIDRequest() {
        }
        
        public GenerateClientIDRequest(FileUploader.LocalService.GenerateClientIDRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class GenerateClientIDRequestBody {
        
        public GenerateClientIDRequestBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GenerateClientIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GenerateClientIDResponse", Namespace="http://SilverLight2Demmo/FileService", Order=0)]
        public FileUploader.LocalService.GenerateClientIDResponseBody Body;
        
        public GenerateClientIDResponse() {
        }
        
        public GenerateClientIDResponse(FileUploader.LocalService.GenerateClientIDResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://SilverLight2Demmo/FileService")]
    public partial class GenerateClientIDResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GenerateClientIDResult;
        
        public GenerateClientIDResponseBody() {
        }
        
        public GenerateClientIDResponseBody(string GenerateClientIDResult) {
            this.GenerateClientIDResult = GenerateClientIDResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SaveFileChunkRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SaveFileChunk", Namespace="http://SilverLight2Demmo/FileService", Order=0)]
        public FileUploader.LocalService.SaveFileChunkRequestBody Body;
        
        public SaveFileChunkRequest() {
        }
        
        public SaveFileChunkRequest(FileUploader.LocalService.SaveFileChunkRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://SilverLight2Demmo/FileService")]
    public partial class SaveFileChunkRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string ClientID;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string FileName;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public byte[] Data;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public int Offset;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string CheckSum;
        
        public SaveFileChunkRequestBody() {
        }
        
        public SaveFileChunkRequestBody(string ClientID, string FileName, byte[] Data, int Offset, string CheckSum) {
            this.ClientID = ClientID;
            this.FileName = FileName;
            this.Data = Data;
            this.Offset = Offset;
            this.CheckSum = CheckSum;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SaveFileChunkResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SaveFileChunkResponse", Namespace="http://SilverLight2Demmo/FileService", Order=0)]
        public FileUploader.LocalService.SaveFileChunkResponseBody Body;
        
        public SaveFileChunkResponse() {
        }
        
        public SaveFileChunkResponse(FileUploader.LocalService.SaveFileChunkResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://SilverLight2Demmo/FileService")]
    public partial class SaveFileChunkResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool SaveFileChunkResult;
        
        public SaveFileChunkResponseBody() {
        }
        
        public SaveFileChunkResponseBody(bool SaveFileChunkResult) {
            this.SaveFileChunkResult = SaveFileChunkResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ProcessFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ProcessFile", Namespace="http://SilverLight2Demmo/FileService", Order=0)]
        public FileUploader.LocalService.ProcessFileRequestBody Body;
        
        public ProcessFileRequest() {
        }
        
        public ProcessFileRequest(FileUploader.LocalService.ProcessFileRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://SilverLight2Demmo/FileService")]
    public partial class ProcessFileRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string ClientID;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string FileName;
        
        public ProcessFileRequestBody() {
        }
        
        public ProcessFileRequestBody(string ClientID, string FileName) {
            this.ClientID = ClientID;
            this.FileName = FileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ProcessFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ProcessFileResponse", Namespace="http://SilverLight2Demmo/FileService", Order=0)]
        public FileUploader.LocalService.ProcessFileResponseBody Body;
        
        public ProcessFileResponse() {
        }
        
        public ProcessFileResponse(FileUploader.LocalService.ProcessFileResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://SilverLight2Demmo/FileService")]
    public partial class ProcessFileResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool ProcessFileResult;
        
        public ProcessFileResponseBody() {
        }
        
        public ProcessFileResponseBody(bool ProcessFileResult) {
            this.ProcessFileResult = ProcessFileResult;
        }
    }
    
    public interface FileServiceSoapChannel : FileUploader.LocalService.FileServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GenerateClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class SaveFileChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveFileChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class ProcessFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProcessFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class FileServiceSoapClient : System.ServiceModel.ClientBase<FileUploader.LocalService.FileServiceSoap>, FileUploader.LocalService.FileServiceSoap {
        
        private BeginOperationDelegate onBeginGenerateClientIDDelegate;
        
        private EndOperationDelegate onEndGenerateClientIDDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateClientIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveFileChunkDelegate;
        
        private EndOperationDelegate onEndSaveFileChunkDelegate;
        
        private System.Threading.SendOrPostCallback onSaveFileChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginProcessFileDelegate;
        
        private EndOperationDelegate onEndProcessFileDelegate;
        
        private System.Threading.SendOrPostCallback onProcessFileCompletedDelegate;
        
        private static System.ServiceModel.Channels.Binding defaultBinding = new System.ServiceModel.BasicHttpBinding();
        
        private static System.ServiceModel.EndpointAddress defaultAddress = new System.ServiceModel.EndpointAddress("http://localhost/SilverLight2DemoSite/FileUploader/FileService.asmx");
        
        public FileServiceSoapClient() : 
                this(defaultBinding, defaultAddress) {
        }
        
        public FileServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GenerateClientIDCompletedEventArgs> GenerateClientIDCompleted;
        
        public event System.EventHandler<SaveFileChunkCompletedEventArgs> SaveFileChunkCompleted;
        
        public event System.EventHandler<ProcessFileCompletedEventArgs> ProcessFileCompleted;
        
        System.IAsyncResult FileUploader.LocalService.FileServiceSoap.BeginGenerateClientID(FileUploader.LocalService.GenerateClientIDRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateClientID(request, callback, asyncState);
        }
        
        private System.IAsyncResult BeginGenerateClientID(System.AsyncCallback callback, object asyncState) {
            FileUploader.LocalService.GenerateClientIDRequest inValue = new FileUploader.LocalService.GenerateClientIDRequest();
            inValue.Body = new FileUploader.LocalService.GenerateClientIDRequestBody();
            return ((FileUploader.LocalService.FileServiceSoap)(this)).BeginGenerateClientID(inValue, callback, asyncState);
        }
        
        FileUploader.LocalService.GenerateClientIDResponse FileUploader.LocalService.FileServiceSoap.EndGenerateClientID(System.IAsyncResult result) {
            return base.Channel.EndGenerateClientID(result);
        }
        
        private string EndGenerateClientID(System.IAsyncResult result) {
            FileUploader.LocalService.GenerateClientIDResponse retVal = ((FileUploader.LocalService.FileServiceSoap)(this)).EndGenerateClientID(result);
            return retVal.Body.GenerateClientIDResult;
        }
        
        private System.IAsyncResult OnBeginGenerateClientID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGenerateClientID(callback, asyncState);
        }
        
        private object[] OnEndGenerateClientID(System.IAsyncResult result) {
            string retVal = this.EndGenerateClientID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateClientIDCompleted(object state) {
            if ((this.GenerateClientIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateClientIDCompleted(this, new GenerateClientIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateClientIDAsync() {
            this.GenerateClientIDAsync(null);
        }
        
        public void GenerateClientIDAsync(object userState) {
            if ((this.onBeginGenerateClientIDDelegate == null)) {
                this.onBeginGenerateClientIDDelegate = new BeginOperationDelegate(this.OnBeginGenerateClientID);
            }
            if ((this.onEndGenerateClientIDDelegate == null)) {
                this.onEndGenerateClientIDDelegate = new EndOperationDelegate(this.OnEndGenerateClientID);
            }
            if ((this.onGenerateClientIDCompletedDelegate == null)) {
                this.onGenerateClientIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateClientIDCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateClientIDDelegate, null, this.onEndGenerateClientIDDelegate, this.onGenerateClientIDCompletedDelegate, userState);
        }
        
        System.IAsyncResult FileUploader.LocalService.FileServiceSoap.BeginSaveFileChunk(FileUploader.LocalService.SaveFileChunkRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveFileChunk(request, callback, asyncState);
        }
        
        private System.IAsyncResult BeginSaveFileChunk(string ClientID, string FileName, byte[] Data, int Offset, string CheckSum, System.AsyncCallback callback, object asyncState) {
            FileUploader.LocalService.SaveFileChunkRequest inValue = new FileUploader.LocalService.SaveFileChunkRequest();
            inValue.Body = new FileUploader.LocalService.SaveFileChunkRequestBody();
            inValue.Body.ClientID = ClientID;
            inValue.Body.FileName = FileName;
            inValue.Body.Data = Data;
            inValue.Body.Offset = Offset;
            inValue.Body.CheckSum = CheckSum;
            return ((FileUploader.LocalService.FileServiceSoap)(this)).BeginSaveFileChunk(inValue, callback, asyncState);
        }
        
        FileUploader.LocalService.SaveFileChunkResponse FileUploader.LocalService.FileServiceSoap.EndSaveFileChunk(System.IAsyncResult result) {
            return base.Channel.EndSaveFileChunk(result);
        }
        
        private bool EndSaveFileChunk(System.IAsyncResult result) {
            FileUploader.LocalService.SaveFileChunkResponse retVal = ((FileUploader.LocalService.FileServiceSoap)(this)).EndSaveFileChunk(result);
            return retVal.Body.SaveFileChunkResult;
        }
        
        private System.IAsyncResult OnBeginSaveFileChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ClientID = ((string)(inValues[0]));
            string FileName = ((string)(inValues[1]));
            byte[] Data = ((byte[])(inValues[2]));
            int Offset = ((int)(inValues[3]));
            string CheckSum = ((string)(inValues[4]));
            return this.BeginSaveFileChunk(ClientID, FileName, Data, Offset, CheckSum, callback, asyncState);
        }
        
        private object[] OnEndSaveFileChunk(System.IAsyncResult result) {
            bool retVal = this.EndSaveFileChunk(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveFileChunkCompleted(object state) {
            if ((this.SaveFileChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveFileChunkCompleted(this, new SaveFileChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveFileChunkAsync(string ClientID, string FileName, byte[] Data, int Offset, string CheckSum) {
            this.SaveFileChunkAsync(ClientID, FileName, Data, Offset, CheckSum, null);
        }
        
        public void SaveFileChunkAsync(string ClientID, string FileName, byte[] Data, int Offset, string CheckSum, object userState) {
            if ((this.onBeginSaveFileChunkDelegate == null)) {
                this.onBeginSaveFileChunkDelegate = new BeginOperationDelegate(this.OnBeginSaveFileChunk);
            }
            if ((this.onEndSaveFileChunkDelegate == null)) {
                this.onEndSaveFileChunkDelegate = new EndOperationDelegate(this.OnEndSaveFileChunk);
            }
            if ((this.onSaveFileChunkCompletedDelegate == null)) {
                this.onSaveFileChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveFileChunkCompleted);
            }
            base.InvokeAsync(this.onBeginSaveFileChunkDelegate, new object[] {
                        ClientID,
                        FileName,
                        Data,
                        Offset,
                        CheckSum}, this.onEndSaveFileChunkDelegate, this.onSaveFileChunkCompletedDelegate, userState);
        }
        
        System.IAsyncResult FileUploader.LocalService.FileServiceSoap.BeginProcessFile(FileUploader.LocalService.ProcessFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessFile(request, callback, asyncState);
        }
        
        private System.IAsyncResult BeginProcessFile(string ClientID, string FileName, System.AsyncCallback callback, object asyncState) {
            FileUploader.LocalService.ProcessFileRequest inValue = new FileUploader.LocalService.ProcessFileRequest();
            inValue.Body = new FileUploader.LocalService.ProcessFileRequestBody();
            inValue.Body.ClientID = ClientID;
            inValue.Body.FileName = FileName;
            return ((FileUploader.LocalService.FileServiceSoap)(this)).BeginProcessFile(inValue, callback, asyncState);
        }
        
        FileUploader.LocalService.ProcessFileResponse FileUploader.LocalService.FileServiceSoap.EndProcessFile(System.IAsyncResult result) {
            return base.Channel.EndProcessFile(result);
        }
        
        private bool EndProcessFile(System.IAsyncResult result) {
            FileUploader.LocalService.ProcessFileResponse retVal = ((FileUploader.LocalService.FileServiceSoap)(this)).EndProcessFile(result);
            return retVal.Body.ProcessFileResult;
        }
        
        private System.IAsyncResult OnBeginProcessFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ClientID = ((string)(inValues[0]));
            string FileName = ((string)(inValues[1]));
            return this.BeginProcessFile(ClientID, FileName, callback, asyncState);
        }
        
        private object[] OnEndProcessFile(System.IAsyncResult result) {
            bool retVal = this.EndProcessFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProcessFileCompleted(object state) {
            if ((this.ProcessFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessFileCompleted(this, new ProcessFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessFileAsync(string ClientID, string FileName) {
            this.ProcessFileAsync(ClientID, FileName, null);
        }
        
        public void ProcessFileAsync(string ClientID, string FileName, object userState) {
            if ((this.onBeginProcessFileDelegate == null)) {
                this.onBeginProcessFileDelegate = new BeginOperationDelegate(this.OnBeginProcessFile);
            }
            if ((this.onEndProcessFileDelegate == null)) {
                this.onEndProcessFileDelegate = new EndOperationDelegate(this.OnEndProcessFile);
            }
            if ((this.onProcessFileCompletedDelegate == null)) {
                this.onProcessFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessFileCompleted);
            }
            base.InvokeAsync(this.onBeginProcessFileDelegate, new object[] {
                        ClientID,
                        FileName}, this.onEndProcessFileDelegate, this.onProcessFileCompletedDelegate, userState);
        }
        
        protected override FileUploader.LocalService.FileServiceSoap CreateChannel() {
            return new FileServiceSoapClientChannel(this);
        }
        
        private class FileServiceSoapClientChannel : ChannelBase<FileUploader.LocalService.FileServiceSoap>, FileUploader.LocalService.FileServiceSoap {
            
            public FileServiceSoapClientChannel(System.ServiceModel.ClientBase<FileUploader.LocalService.FileServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGenerateClientID(FileUploader.LocalService.GenerateClientIDRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GenerateClientID", _args, callback, asyncState);
                return _result;
            }
            
            public FileUploader.LocalService.GenerateClientIDResponse EndGenerateClientID(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileUploader.LocalService.GenerateClientIDResponse _result = ((FileUploader.LocalService.GenerateClientIDResponse)(base.EndInvoke("GenerateClientID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveFileChunk(FileUploader.LocalService.SaveFileChunkRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SaveFileChunk", _args, callback, asyncState);
                return _result;
            }
            
            public FileUploader.LocalService.SaveFileChunkResponse EndSaveFileChunk(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileUploader.LocalService.SaveFileChunkResponse _result = ((FileUploader.LocalService.SaveFileChunkResponse)(base.EndInvoke("SaveFileChunk", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginProcessFile(FileUploader.LocalService.ProcessFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ProcessFile", _args, callback, asyncState);
                return _result;
            }
            
            public FileUploader.LocalService.ProcessFileResponse EndProcessFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileUploader.LocalService.ProcessFileResponse _result = ((FileUploader.LocalService.ProcessFileResponse)(base.EndInvoke("ProcessFile", _args, result)));
                return _result;
            }
        }
    }
}
